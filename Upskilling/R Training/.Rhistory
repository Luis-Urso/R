mutate(residuos = model_companies_sw2$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "#287D8EFF",
bins = 30,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(model_companies_sw2$residuals),
sd = sd(model_companies_sw2$residuals)),
size = 2, color = "grey30") +
scale_color_manual(values = "grey50") +
labs(x = "Residuals",
y = "Frequency") +
theme_bw()
export_summs(model_companies_sw, model_companies_bc,
model.names = c("Linear Model","Box-Cox MOdel"),
scale = F, digits = 6)
#Parâmetros reais do modelo com procedimento Stepwise e Box-Cox
confint(model_companies_bc, level = 0.95) # siginificância 5%
plot_summs(model_companies_bc, colors = "#287D8EFF") #função 'plot_summs' do pacote 'ggstance'
## See the Confidence Interval for Box-Cox Model
confint(model_companies_bc, level = 0.95) # siginificância 5%
#Parâmetros padronizados
plot_summs(model_companies_bc, scale = TRUE, colors = "#287D8EFF")
## Plot the Model Scaled
plot_summs(model_companies_bc, scale = TRUE, colors = "#287D8EFF")
## Plot the Model Scaled
plot_summs(model_companies_bc, scale = TRUE, colors = "#287D8EFF")
#Adicionando caracterização da distribição normal no IC de cada parâmetro beta
plot_summs(model_companies_bc, scale = TRUE, plot.distributions = TRUE,
inner_ci_level = .95, colors = "#287D8EFF")
## Plot the Model Scaled with Normal Dist
plot_summs(model_companies_bc, scale = TRUE, plot.distributions = TRUE,
inner_ci_level = .95, colors = "#287D8EFF")
## Plot the MOdel Scaled with Normal Dist for Linear and Box-Cox Model
plot_summs(model_companies_sw, model_companies_bc, scale = T, plot.distributions = TRUE,
inner_ci_level = .95, colors = c("#440154FF", "#287D8EFF"))
## Plot the MOdel Scaled with Normal Dist for Linear and Box-Cox Model
plot_summs(model_companies_sw, model_companies_bc, scale = T, plot.distributions = TRUE,
inner_ci_level = .95, colors = c("#440154FF", "#287D8EFF"))
## Plot the Model Comparing the BETAs for Linear versus Box-Cox Model
plot_summs(model_companies_sw, model_companies_bc, scale = T, plot.distributions = TRUE,
inner_ci_level = .95, colors = c("#440154FF", "#287D8EFF"))
predict(object = model_companies_bc,
data.frame(disclosure = 50,
liquidez = 14,
ativos = 4000),
interval = "confidence", level = 0.95)
predict(object = model_companies_bc,
data.frame(disclosure = 50,
liquidez = 14,
ativos = 4000),
interval = "confidence", level = 0.95)
predict(object = model_companies_bc,
data.frame(disclosure = 50,
liquidez = 14,
ativos = 4000),
interval = "confidence", level = 0.95)
model_companies_bc <- lm(formula = bcreturn ~ . -company -return,
data = companies)
summary(model_companies_bc)
chi_sq2 <- qchisq(p = 0.05, df = 1, lower.tail = F)
model_companies_sw2 <- step(model_companies_bc, k = chi_sq2)
summary(model_companies_sw2)
sf_test<-sf.test(model_companies_sw2$residuals)
if (sf_test$p.value < 0.05){
print("H1: There is no adherence to Normality, may need to optimize")
} else {
print("H0: There is adherence to Normality")
}
companies %>%
mutate(residuos = model_companies_sw2$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "#287D8EFF",
bins = 30,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(model_companies_sw2$residuals),
sd = sd(model_companies_sw2$residuals)),
size = 2, color = "grey30") +
scale_color_manual(values = "grey50") +
labs(x = "Residuals",
y = "Frequency") +
theme_bw()
predict(object = model_companies_sw2,
data.frame(disclosure = 50,
liquidez = 14,
ativos = 4000),
interval = "confidence", level = 0.95)
predict(object = model_companies_sw2,
data.frame(disclosure = 50,
liquidity = 14,
assets = 4000),
interval = "confidence", level = 0.95)
predictin <- predict(object = model_companies_sw2,
data.frame(disclosure = 50,
liquidity = 14,
assets = 4000),
interval = "confidence", level = 0.95)
prediction <- predict(object = model_companies_sw2,
data.frame(disclosure = 50,
liquidity = 14,
assets = 4000),
interval = "confidence", level = 0.95)
prediction
prediction[1]
#Não podemos nos esquecer de fazer o cálculo para a obtenção do fitted
#value de Y (retorno)
(((3.702015 * -0.02256414) + 1)) ^ (1 / -0.02256414)
(((step_modelo_bc$fitted.values*(lambda_BC$lambda))+
1))^(1/(lambda_BC$lambda))
step_empresas$fitted.values
step_empresas$fitted.values
Predicted_Result = ((prediction[1] * lambda_BC$lambda) + 1) ^ (1 / lambda_BC$lambda )
Predicted_Result
(((3.702015 * -0.02256414) + 1)) ^ (1 / -0.02256414)
companies$yhat_sw1 <- model_companies_sw$fitted.values
companies$yhat_bc <- (((model_companies_bc$fitted.values*(lambda_BC$lambda))+
1))^(1/(lambda_BC$lambda))
View(companies)
companies %>%
ggplot() +
geom_smooth(aes(x = return, y = yhat_sw1, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5) +
geom_point(aes(x = return, y = yhat_sw1),
color = "#440154FF", alpha = 0.6, size = 2) +
geom_smooth(aes(x = return, y = yhat_bc, color = "Stepwise Box-Cox"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5) +
geom_point(aes(x = return, y = yhat_bc),
color = "#287D8EFF", alpha = 0.6, size = 2) +
geom_smooth(aes(x = return, y = return), method = "lm", formula = y ~ x,
color = "grey30", size = 1.05,
linetype = "longdash") +
scale_color_manual("Model:",
values = c("#287D8EFF", "#440154FF")) +
labs(x = "Return", y = "Fitted Values") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom")
step_empresas$fitted.values
packages <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","correlation","see",
"ggraph","psych","nortest","rgl","car","ggside","tidyquant","olsrr",
"jtools","ggstance","magick","cowplot","emojifont","beepr","Rcpp",
"equatiomatic")
options(rgl.debug = TRUE)
if(sum(as.numeric(!packages %in% installed.packages())) != 0){
installed <- packages[!packages %in% installed.packages()]
for(i in 1:length(installed)) {
install.packages(installed, dependencies = T)
break()}
sapply(packages, require, character = T)
} else {
sapply(packages, require, character = T)
}
companies <- read.csv("Companies.csv")
summary(companies)
summary(companies)
companies %>%
correlation(method = "pearson") %>%
plot()
chart.Correlation((companies[2:6]), histogram = TRUE)
pairs.panels(companies[2:6],
smooth = TRUE,
lm = TRUE,
scale = FALSE,
density = TRUE,
ellipses = FALSE,
method = "pearson",
pch = 1,
cor = TRUE,
hist.col = "aquamarine",
breaks = 12,
stars = TRUE, # If TRUE, adds significance level with stars
ci = TRUE, alpha = 0.05)
install.packages("metan")
install.packages("metan")
library(metan)
companies %>%
corr_plot(return, disclosure, indebtedness , assets, liquidity,
shape.point = 21,
col.point = "black",
fill.point = "#FDE725FF",
size.point = 2,
alpha.point = 0.6,
maxsize = 4,
minsize = 2,
smooth = TRUE,
col.smooth = "black",
col.sign = "#440154FF",
upper = "corr",
lower = "scatter",
diag.type = "density",
col.diag = "#440154FF",
pan.spacing = 0,
lab.position = "bl")
companies %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
companies %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
companies %>%
kable() %>%
kable_styling(bootstrap_options = "stripped",
full_width = F,
font_size = 22)
if(sum(as.numeric(!packages %in% installed.packages())) != 0){
installed <- packages[!packages %in% installed.packages()]
for(i in 1:length(installed)) {
install.packages(installed, dependencies = T)
break()}
sapply(packages, require, character = T)
} else {
sapply(packages, require, character = T)
}
companies %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
model_companies_ln <- lm(formula = return ~ . - company,
data = companies)
model_companies_ln <- lm(formula = return ~ . - company,
data = companies)
summary(model_companies_ln)
summary(model_companies_ln)
chi_sq <- qchisq(p = 0.05, df = 1, lower.tail = F)
round(pchisq(chi_sq, df = 1, lower.tail = F), 7)
model_companies_sw <- step(model_companies, k = chi_sq)
model_companies_sw <- step(model_companies_ln, k = chi_sq)
summary(model_companies_sw)
export_summs(model_companies_sw, scale = F, digits = 5)
confint(model_companies_sw, level = 0.95)
plot_summs(model_companies_sw, colors = "#440154FF")
plot_summs(model_companies_sw, scale=TRUE, colors = "#440154FF")
plot_summs(model_companies_sw, scale = TRUE, plot.distributions = TRUE,
inner_ci_level = .95, colors = "#440154FF")
plot_summs(model_companies_sw,model_companies, scale = TRUE, plot.distributions = TRUE,
inner_ci_level = .95, colors = c("#FDE725FF", "#440154FF"),)
sf_test<-sf.test(model_companies_sw$residuals)
sf_test
if (sf_test$p.value < 0.05){
print("H1: There is no adherence to Normality, may need to optimize")
} else {
print("H0: There is adherence to Normality")
}
companies %>%
mutate(residuos = model_companies_sw$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "#440154FF",
bins = 30,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(model_companies_sw$residuals),
sd = sd(model_companies_sw$residuals)),
size = 2, color = "grey30") +
scale_color_manual(values = "grey50") +
labs(x = "Resíduos",
y = "Frequência") +
theme_bw()
lambda_BC <- powerTransform(companies$return)
lambda_BC
companies$bcreturn <- (((companies$return ^ lambda_BC$lambda) - 1) /
lambda_BC$lambda)
View(companies)
companies %>%
select(company, return, bcreturn, everything()) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 18)
model_companies_bc <- lm(formula = bcreturn ~ . -company -return,
data = companies)
summary(model_companies_bc)
chi_sq <- qchisq(p = 0.05, df = 1, lower.tail = F)
model_companies_sw_bc <- step(model_companies_bc, k = chi_sq)
summary(model_companies_sw_bc)
sf_test<-sf.test(model_companies_sw_bc$residuals)
sf_test
if (sf_test$p.value < 0.05){
print("H1: There is no adherence to Normality, may need to optimize")
} else {
print("H0: There is adherence to Normality")
}
companies %>%
mutate(residuos = model_companies_sw_bc$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "#287D8EFF",
bins = 30,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(model_companies_sw_bc$residuals),
sd = sd(model_companies_sw_bc$residuals)),
size = 2, color = "grey30") +
scale_color_manual(values = "grey50") +
labs(x = "Residuals",
y = "Frequency") +
theme_bw()
export_summs(model_companies_sw, model_companies_bc,
model.names = c("Linear Model","Box-Cox MOdel"),
scale = F, digits = 6)
## Plot the Model (Not Scaled) - This is an Error to Make !
plot_summs(model_companies_bc, colors = "#287D8EFF")
## Plot the Model Scaled
plot_summs(model_companies_bc, scale = TRUE, colors = "#287D8EFF")
## Plot the Model Scaled with Normal Dist
plot_summs(model_companies_bc, scale = TRUE, plot.distributions = TRUE,
inner_ci_level = .95, colors = "#287D8EFF")
## Plot the Model Comparing the BETAs for Linear versus Box-Cox Model
plot_summs(model_companies_sw, model_companies_bc, scale = T, plot.distributions = TRUE,
inner_ci_level = .95, colors = c("#440154FF", "#287D8EFF"))
prediction <- predict(object = model_companies_sw_bc,
data.frame(disclosure = 50,
liquidity = 14,
assets = 4000),
interval = "confidence", level = 0.95)
Predicted_result = ((prediction[1] * lambda_BC$lambda) + 1) ^ (1 / lambda_BC$lambda )
Predicted_result
companies$yhat_sw <- model_companies_sw$fitted.values
companies$yhat_swbc <- (((model_companies_bc$fitted.values*(lambda_BC$lambda))+
1))^(1/(lambda_BC$lambda))
companies %>%
ggplot() +
geom_smooth(aes(x = return, y = yhat_sw, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5) +
geom_point(aes(x = return, y = yhat_sw),
color = "#440154FF", alpha = 0.6, size = 2) +
geom_smooth(aes(x = return, y = yhat_swbc, color = "Stepwise Box-Cox"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5) +
geom_point(aes(x = return, y = yhat_swbc),
color = "#287D8EFF", alpha = 0.6, size = 2) +
geom_smooth(aes(x = return, y = return), method = "lm", formula = y ~ x,
color = "grey30", size = 1.05,
linetype = "longdash") +
scale_color_manual("Model:",
values = c("#287D8EFF", "#440154FF")) +
labs(x = "Return", y = "Fitted Values") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom")
install.packages('dplyr','plotly')
packages <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","correlation","see",
"ggraph","psych","nortest","rgl","car","ggside","tidyquant","olsrr",
"jtools","ggstance","magick","cowplot","emojifont","beepr","Rcpp",
"equatiomatic")
options(rgl.debug = TRUE)
if(sum(as.numeric(!packages %in% installed.packages())) != 0){
installed <- packages[!packages %in% installed.packages()]
for(i in 1:length(installed)) {
install.packages(installed, dependencies = T)
break()}
sapply(packages, require, character = T)
} else {
sapply(packages, require, character = T)
}
df_diabetes <- read.csv("Diabetes.csv")
summary(df_diabetes)
View(df_diabetes)
df_diabetes %>%
ggplot() +
geom_smooth(aes(x = return, y = yhat_sw, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5)
df_diabetes %>%
ggplot() +
geom_smooth(aes(x = Age, y = Glucose, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5)
df_diabetes %>%
ggplot() +
geom_smooth(aes(x = Age, y = Glucose, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x*2, df = 5), size = 1.5)
df_diabetes %>%
ggplot() +
geom_smooth(aes(x = Age, y = Glucose, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x^2, df = 5), size = 1.5)
df_diabetes %>%
ggplot() +
geom_smooth(aes(x = Age, y = Glucose, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x^2, df = 5), size = 1.5)
df_diabetes %>%
ggplot() +
geom_smooth(aes(x = Age, y = Glucose, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 2), size = 1.5)
df_diabetes %>%
ggplot() +
geom_smooth(aes(x = Age, y = Glucose, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 4), size = 1.5)
df_diabetes %>%
ggplot() +
geom_smooth(aes(x = Age, y = Glucose, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5)
df_diabetes %>%
ggplot() +
geom_smooth(aes(x = Age, y = Glucose, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5) +
labs(x = "Return", y = "Fitted Values") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom")
df_diabetes %>%
ggplot() +
geom_smooth(aes(x = Age, y = Glucose, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5) +
labs(x = "Age", y = "Glucose") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom")
df_diabetes %>%
ggplot() +
geom_smooth(aes(x = Age, y = Glucose, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5) +
scale_color_manual("Model:",
values = c("#287D8EFF", "#440154FF")) +
labs(x = "Age", y = "Glucose") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom")
df_diabetes %>%
ggplot() +
geom_smooth(aes(x = Age, y = Glucose, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5) +
geom_point(aes(x = Age, y = Glucose),
color = "#440154FF", alpha = 0.6, size = 2) +
labs(x = "Age", y = "Glucose") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom")
summary(df_diabetes)
df_diabetes %>%
ggplot() +
geom_smooth(aes(x = Age, y = Glucose, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5) +
geom_point(aes(x = Age, y = DiabetesPedigreeFunction),
color = "#440154FF", alpha = 0.6, size = 2) +
labs(x = "Age", y = "Glucose") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom")
df_diabetes %>%
ggplot() +
geom_smooth(aes(x = Age, y = Glucose, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5) +
geom_point(aes(x = Age, y = DiabetesPedigreeFunction*100),
color = "#440154FF", alpha = 0.6, size = 2) +
labs(x = "Age", y = "Glucose") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom")
df_diabetes %>%
ggplot() +
geom_point(aes(x = Age, y = DiabetesPedigreeFunction*100),
color = "#440154FF", alpha = 0.6, size = 2) +
labs(x = "Age", y = "Glucose") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom")
df_diabetes %>%
ggplot() +
geom_point(aes(x = Age, y = Glucose),
color = "#440154FF", alpha = 0.6, size = 2) +
labs(x = "Age", y = "Glucose") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom")
df_diabetes %>%
ggplot() +
geom_point(aes(x = Age, y = Glucose),
color = "#440154FF", alpha = 0.6, size = 2) +
labs(x = "Age", y = "Glucose") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom")
df_diabetes %>%
ggplot() +
geom_point(aes(x = Age, y = Glucose),
color = "#440154FF", alpha = 0.6, size = 2) +
labs(x = "Age", y = "Glucose") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom")
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom)line()
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geomline()
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_line()
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_col()
