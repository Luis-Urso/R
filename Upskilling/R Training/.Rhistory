View(df_salaries)
df_salaries <- seniority
View(df_diabetes)
df_salaries <- Salaries # Copy to df_salaries (standardize the naming)
seniority <- round(df_salaries$yrs.service/5)
df_salaries <- Salaries # Copy to df_salaries (standardize the naming)
df_salaries$seniority <- round(df_salaries$yrs.service/5)
View(df_salaries)
df_salaries <- Salaries # Copy to df_salaries (standardize the naming)
df_salaries$seniority <- round(df_salaries$yrs.service/5)
df_salaries <- Salaries # Copy to df_salaries (standardize the naming)
df_salaries$seniority %>% cbind(round(df_salaries$yrs.service/5))
df_salaries <- Salaries # Copy to df_salaries (standardize the naming)
data("Salaries")
data()
data("Salaries")
df_salaries <- Salaries # Copy to df_salaries (standardize the naming)
data()
data("Salaries")
data()
data("Sleep")
data("sleep")
data("sleep")
force(sleep)
data("Salaries")
packages <- c("plotly","tidyverse","dplyr")
options(rgl.debug = TRUE)
if(sum(as.numeric(!packages %in% installed.packages())) != 0){
installed <- packages[!packages %in% installed.packages()]
for(i in 1:length(installed)) {
install.packages(installed, dependencies = T)
break()}
sapply(packages, require, character = T)
} else {
sapply(packages, require, character = T)
}
data()
data("Salaries")
data("who")
force(who)
View(who)
data()
data("cms_patient_care")
force(cms_patient_care)
View(cms_patient_care)
data()
data("iris")
force(iris)
View(iris)
packages <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","correlation","see",
"ggraph","psych","nortest","rgl","car","ggside","tidyquant","olsrr",
"jtools","ggstance","magick","cowplot","emojifont","beepr","Rcpp",
"equatiomatic")
options(rgl.debug = TRUE)
if(sum(as.numeric(!packages %in% installed.packages())) != 0){
installed <- packages[!packages %in% installed.packages()]
for(i in 1:length(installed)) {
install.packages(installed, dependencies = T)
break()}
sapply(packages, require, character = T)
} else {
sapply(packages, require, character = T)
}
data("Salaries")
data()
df_salaries <- Salaries # Copy to df_salaries (standardize the naming)
df_salaries %>% cbind(round(df_salaries$yrs.service/5))
signif(27.547,3)
round(33.76543,2)
signif(27.547,2)
signif(27.547,1)
signif(27.547,3)
df_salaries %>% cbind(signif(df_salaries$yrs.service/5,2))
df_salaries %>% cbind(signif(df_salaries$yrs.service/5,1))
df_salaries %>% cbind(rount(signif(df_salaries$yrs.service/5,1)))
df_salaries %>% cbind(round(signif(df_salaries$yrs.service/5,1)))
df_salaries %>% cbind(signif(df_salaries$yrs.service/5))
df_salaries %>% cbind(round(df_salaries$yrs.service/5))
View(df_salaries)
View(Salaries)
View(df_salaries)
View(Salaries)
View(df_salaries)
df_salaries$seniority <- round(df_salaries$yrs.service/5)
View(df_salaries)
Salaries <- NULL
Salaries <- NULL
data("Salaries")
df_salaries <- Salaries
df_salaries$seniority <- round(df_salaries$yrs.service/5)
Salaries <- NULL
df_diabetes <- read.csv("Diabetes.csv")
df_diabetes <- filter(df_diabetes,BMI>0)
df_diabetes$Outcome <- ifelse(df_diabetes$Outcome==1,"Yes","No")
summary(df_salaries)
summary(df_diabetes)
View(df_salaries)
View(df_diabetes)
ggplot(df_diabetes,aes(x=Age,y=BMI)) +
geom_line(color="red")
ggplot(df_diabetes,aes(x=Age,y=BMI)) +
geom_line(aes(color=Outcome))
ggplot(df_salaries,aes(x=yrs.service,y=salary)) +
geom_line(aes(color=sex))
ggplot(df_diabetes,aes(x=Age,y=BMI)) +
geom_area(aes(fill=Outcome),alpha=0.5) # See that as Outcome is 0 or 1 it doesn't make too much difference.
ggplot(df_salaries,aes(x=yrs.service,y=salary)) +
geom_area(aes(fill=sex),alpha=0.6)
ggplot(df_diabetes,aes(x=Age,y=BMI)) +
geom_point(aes(color=Outcome))
ggplot(df_salaries,aes(x=yrs.service,y=salary)) +
geom_point(aes(color=sex),alpha=0.6)
ggplot(df_salaries,aes(x=yrs.service,y=salary,size=yrs.since.phd,color=yrs.since.phd)) +
geom_point(alpha=0.5) +
scale_size_area()
ggplot(df_salaries,aes(x=seniority,y=salary,size=yrs.since.phd,color=yrs.since.phd)) +
geom_point(alpha=0.5) +
scale_size_area()
ggplot(df_salaries,aes(x=yrs.service,y=salary,size=seniority,color=yrs.since.phd)) +
geom_point(alpha=0.5) +
scale_size_area()
ggplot(df_salaries,aes(x=yrs.service,y=salary,size=seniority,color=seniority)) +
geom_point(alpha=0.5) +
scale_size_area()
ggplot(df_salaries,aes(x=yrs.service,y=salary,size=seniority)) +
geom_point(alpha=0.5,aes(color=seniority)) +
scale_size_area()
ggplot(df_salaries,aes(x=yrs.service,y=salary,size=seniority,color="Stepwise")) +
geom_point(alpha=0.5,aes(color=seniority)) +
scale_size_area()
ggplot(df_salaries,aes(x=yrs.service,y=salary,size=seniority,color="Stepwise")) +
geom_point(alpha=0.5) +
scale_size_area()
ggplot(df_diabetes,aes(x=Age,y=BMI)) +
geom_col(aes(color=Outcome))
ggplot(df_diabetes,aes(x=Age,y=BMI)) +
geom_col(aes(fill=Outcome))
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_line()
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_col()
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_point(alpha=0.7,size = df_diabetes$Age/25) +
geom_segment(aes(x = Age, xend = Age, y=0 , yend = Glucose))
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_point(alpha=0.7,size = df_diabetes$Age/10) +
geom_segment(aes(x = Age, xend = Age, y=0 , yend = Glucose))
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_point(alpha=0.7,size = df_diabetes$Age/10) +
geom_segment(aes(x = Age, xend = Age, y=0 , yend = Glucose)) +
scale_size_area()
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_point(alpha=0.7,size = df_diabetes$Age/10) +
geom_segment(aes(x = Age, xend = Age, y=0 , yend = Glucose)) +
scale_size_area()
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_point(alpha=0.7,size = df_diabetes$Age/2) +
geom_segment(aes(x = Age, xend = Age, y=0 , yend = Glucose)) +
scale_size_area()
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_point(alpha=0.7,size = df_diabetes$Age/5) +
geom_segment(aes(x = Age, xend = Age, y=0 , yend = Glucose)) +
scale_size_area()
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_point(alpha=0.7,size = df_diabetes$Age/6) +
geom_segment(aes(x = Age, xend = Age, y=0 , yend = Glucose)) +
scale_size_area()
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_point(alpha=0.7,size = df_diabetes$Age/10) +
geom_segment(aes(x = Age, xend = Age, y=0 , yend = Glucose)) +
scale_size_area()
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_point(alpha=0.7,size = df_diabetes$Age/10,color=df_diabetes) +
geom_segment(aes(x = Age, xend = Age, y=0 , yend = Glucose)) +
scale_size_area()
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_point(alpha=0.7,size = df_diabetes$Age/10,color=df_diabetes$Age) +
geom_segment(aes(x = Age, xend = Age, y=0 , yend = Glucose)) +
scale_size_area()
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_point(alpha=0.7,size = df_diabetes$Age/10,color=c('red','blue','yellow')) +
geom_segment(aes(x = Age, xend = Age, y=0 , yend = Glucose)) +
scale_size_area()
ggplot(df_diabetes,aes(x= Age, y=Glucose)) +
geom_point(alpha=0.7,size = df_diabetes$Age/10,color=('red','blue','yellow')) +
packages <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","correlation","see",
"ggraph","psych","nortest","rgl","car","ggside","tidyquant","olsrr",
"jtools","ggstance","magick","cowplot","emojifont","beepr","Rcpp",
"equatiomatic")
options(rgl.debug = TRUE)
if(sum(as.numeric(!packages %in% installed.packages())) != 0){
installed <- packages[!packages %in% installed.packages()]
for(i in 1:length(installed)) {
install.packages(installed, dependencies = T)
break()}
sapply(packages, require, character = T)
} else {
sapply(packages, require, character = T)
}
data()
data("Salaries")
df_salaries <- Salaries
df_salaries$seniority <- round(df_salaries$yrs.service/5)
Salaries <- NULL
df_diabetes <- read.csv("Diabetes.csv")
df_diabetes <- filter(df_diabetes,BMI>0)
df_diabetes$Outcome <- ifelse(df_diabetes$Outcome==1,"Yes","No")
summary(df_salaries)
summary(df_diabetes)
ggplot(df_diabetes,aes(x=Age,y=BMI)) +
geom_line(color="red")
df_salaries %>% ggplot(aes(salary)) + geom_histogram(bins=15)
df_salaries %>% ggplot(aes(salary)) + geom_histogram(bins=30)
df_salaries %>% ggplot(aes(salary)) + geom_histogram(aes(color=urs.service),bins=15)
df_salaries %>% ggplot(aes(salary)) + geom_histogram(aes(color=yrs.service),bins=15)
df_salaries %>% ggplot(aes(salary)) + geom_histogram(fill="blue",bins=15)
df_salaries %>% ggplot(aes(salary)) + geom_histogram(fill=yrs.service,bins=15)
df_salaries %>% ggplot(aes(salary)) + geom_histogram(fill="yrs.service",bins=15)
df_salaries %>% ggplot(aes(salary)) + geom_histogram(fill=df_salary$yrs.service,bins=15)
df_salaries %>% ggplot(aes(salary)) + geom_histogram(fill=df_salaries$yrs.service,bins=15)
df_salaries %>% ggplot(aes(salary)) + geom_histogram(fill=df_salaries$sex,bins=15)
df_salaries %>% ggplot(aes(salary)) + geom_histogram(aes(fill=df_salaries$sex),bins=15)
df_salaries %>% ggplot(aes(salary)) + geom_histogram(aes(fill=sex),bins=15)
df_salaries %>% ggplot(aes(x=seniority,y=salaries)) +
geom_boxplot()
df_salaries %>% ggplot(aes(x=seniority,y=salary)) +
geom_boxplot()
df_salaries %>% ggplot(aes(x=seniority,y=yrs.service)) +
geom_boxplot()
df_salaries %>% ggplot(aes(x=yrs.service,y=salary)) +
geom_boxplot()
df_salaries %>% ggplot(aes(x=yrs.service,y=salary)) +
geom_boxplot()+
scale_size_area()
df_salaries %>% ggplot() +
geom_boxplot(aes(x=yrs.service,y=salary)) +
scale_size_area()
packages <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","correlation","see",
"ggraph","psych","nortest","rgl","car","ggside","tidyquant","olsrr",
"jtools","ggstance","magick","cowplot","emojifont","beepr","Rcpp",
"equatiomatic")
options(rgl.debug = TRUE)
if(sum(as.numeric(!packages %in% installed.packages())) != 0){
installed <- packages[!packages %in% installed.packages()]
for(i in 1:length(installed)) {
install.packages(installed, dependencies = T)
break()}
sapply(packages, require, character = T)
} else {
sapply(packages, require, character = T)
}
library(plotly)
dat1 <- data.frame(
sex = factor(c("Female","Female","Male","Male")),
time = factor(c("Lunch","Dinner","Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(13.53, 16.81, 16.24, 17.42)
)
p <- ggplot(data=dat1, aes(x=time, y=total_bill, group=sex)) +
geom_line() +
geom_point()
fig <- ggplotly(p)
fig
View(dat1)
dat1 <- data.frame(
sex = factor(c("Female","Female","Male","Male")),
time = factor(c("Lunch","Dinner","Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(13.53, 16.81, 16.24, 17.42)
)
# Map sex to different point shape, and use larger points
p <- ggplot(data=dat1, aes(x=time, y=total_bill, group=sex, shape=sex)) +
geom_line() +
geom_point()
fig <- ggplotly(p)
fig
p <- ggplot(data=dat1, aes(x=time, y=total_bill, group=sex, shape=sex, colour=sex)) +
geom_line(aes(linetype=sex), size=1) +     # Set linetype by sex
geom_point(size=5) +         # Use larger points, fill with white
scale_colour_hue(name="Sex",      # Set legend title
l=30)  +                  # Use darker colors (lightness=30)
scale_shape_manual(name="Sex",
values=c(22,21)) +      # Use points with a fill color
scale_linetype_discrete(name="Sex") +
xlab("Time of day") + ylab("Total bill") + # Set axis labels
ggtitle("Average bill for 2 people") +     # Set title
theme_bw()
fig <- ggplotly(p)
fig
p <- ggplot(data=dat1, aes(x=time, y=total_bill, shape=sex, colour=sex)) +
geom_line(aes(linetype=sex), size=1) +     # Set linetype by sex
geom_point(size=5) +         # Use larger points, fill with white
scale_colour_hue(name="Sex",      # Set legend title
l=30)  +                  # Use darker colors (lightness=30)
scale_shape_manual(name="Sex",
values=c(22,21)) +      # Use points with a fill color
scale_linetype_discrete(name="Sex") +
xlab("Time of day") + ylab("Total bill") + # Set axis labels
ggtitle("Average bill for 2 people") +     # Set title
theme_bw()
fig <- ggplotly(p)
fig
datn <- read.table(header=TRUE, text='
supp dose length
OJ  0.5  13.23
OJ  1.0  22.70
OJ  2.0  26.06
VC  0.5   7.98
VC  1.0  16.77
VC  2.0  26.14
')
p <- ggplot(data=datn, aes(x=dose, y=length, group=supp, colour=supp)) +
geom_line() +
geom_point()
fig <- ggplotly(p)
fig
ggplot(data=datn, aes(x=dose, y=length, group=supp, colour=supp)) +
geom_line() +
geom_point()
fig <- ggplotly(p)
fig
p <-
p <- ggplot(data=datn, aes(x=dose, y=length, group=supp, colour=supp)) +
geom_line() +
geom_point()
fig <- ggplotly(p)
fig
packages <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","correlation","see",
"ggraph","psych","nortest","rgl","car","ggside","tidyquant","olsrr",
"jtools","ggstance","magick","cowplot","emojifont","beepr","Rcpp",
"equatiomatic")
options(rgl.debug = TRUE)
if(sum(as.numeric(!packages %in% installed.packages())) != 0){
installed <- packages[!packages %in% installed.packages()]
for(i in 1:length(installed)) {
install.packages(installed, dependencies = T)
break()}
sapply(packages, require, character = T)
} else {
sapply(packages, require, character = T)
}
companies <- read.csv("Companies.csv")
summary(companies)
companies %>%
correlation(method = "pearson") %>%
plot()
chart.Correlation((companies[2:6]), histogram = TRUE)
pairs.panels(companies[2:6],
smooth = TRUE,
lm = TRUE,
scale = FALSE,
density = TRUE,
ellipses = FALSE,
method = "pearson",
pch = 1,
cor = TRUE,
hist.col = "aquamarine",
breaks = 12,
stars = TRUE, # If TRUE, adds significance level with stars
ci = TRUE, alpha = 0.05)
install.packages("metan")
library(metan)
companies %>%
corr_plot(return, disclosure, indebtedness , assets, liquidity,
shape.point = 21,
col.point = "black",
fill.point = "#FDE725FF",
size.point = 2,
alpha.point = 0.6,
maxsize = 4,
minsize = 2,
smooth = TRUE,
col.smooth = "black",
col.sign = "#440154FF",
upper = "corr",
lower = "scatter",
diag.type = "density",
col.diag = "#440154FF",
pan.spacing = 0,
lab.position = "bl")
companies %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
model_companies_ln <- lm(formula = return ~ . - company,
data = companies)
summary(model_companies_ln)
chi_sq <- qchisq(p = 0.05, df = 1, lower.tail = F)
round(pchisq(chi_sq, df = 1, lower.tail = F), 7)
model_companies_sw <- step(model_companies_ln, k = chi_sq)
summary(model_companies_sw)
export_summs(model_companies_sw, scale = F, digits = 5)
confint(model_companies_sw, level = 0.95)
plot_summs(model_companies_sw, colors = "#440154FF")
plot_summs(model_companies_sw, scale=TRUE, colors = "#440154FF")
confint(model_companies_sw, level = 0.95)
plot_summs(model_companies_sw, colors = "#440154FF")
plot_summs(model_companies_sw, scale=TRUE, colors = "#440154FF")
plot_summs(model_companies_sw, scale = TRUE, plot.distributions = TRUE,
inner_ci_level = .95, colors = "#440154FF")
plot_summs(model_companies_sw,model_companies, scale = TRUE, plot.distributions = TRUE,
inner_ci_level = .95, colors = c("#FDE725FF", "#440154FF"),)
sf_test<-sf.test(model_companies_sw$residuals)
sf_test
if (sf_test$p.value < 0.05){
print("H1: There is no adherence to Normality, may need to optimize")
} else {
print("H0: There is adherence to Normality")
}
companies %>%
mutate(residuos = model_companies_sw$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "#440154FF",
bins = 30,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(model_companies_sw$residuals),
sd = sd(model_companies_sw$residuals)),
size = 2, color = "grey30") +
scale_color_manual(values = "grey50") +
labs(x = "Resíduos",
y = "Frequência") +
theme_bw()
lambda_BC <- powerTransform(companies$return)
lambda_BC
companies$bcreturn <- (((companies$return ^ lambda_BC$lambda) - 1) /
lambda_BC$lambda)
companies %>%
select(company, return, bcreturn, everything()) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 18)
model_companies_bc <- lm(formula = bcreturn ~ . -company -return,
data = companies)
summary(model_companies_bc)
chi_sq <- qchisq(p = 0.05, df = 1, lower.tail = F)
model_companies_sw_bc <- step(model_companies_bc, k = chi_sq)
summary(model_companies_sw_bc)
sf_test<-sf.test(model_companies_sw_bc$residuals)
sf_test
if (sf_test$p.value < 0.05){
print("H1: There is no adherence to Normality, may need to optimize")
} else {
print("H0: There is adherence to Normality")
}
companies %>%
mutate(residuos = model_companies_sw_bc$residuals) %>%
ggplot(aes(x = residuos)) +
geom_histogram(aes(y = ..density..),
color = "white",
fill = "#287D8EFF",
bins = 30,
alpha = 0.6) +
stat_function(fun = dnorm,
args = list(mean = mean(model_companies_sw_bc$residuals),
sd = sd(model_companies_sw_bc$residuals)),
size = 2, color = "grey30") +
scale_color_manual(values = "grey50") +
labs(x = "Residuals",
y = "Frequency") +
theme_bw()
export_summs(model_companies_sw, model_companies_bc,
model.names = c("Linear Model","Box-Cox MOdel"),
scale = F, digits = 6)
## See the Confidence Interval for Box-Cox Model
confint(model_companies_bc, level = 0.95)
## Plot the Model (Not Scaled) - This is an Error to Make !
plot_summs(model_companies_bc, colors = "#287D8EFF")
## Plot the Model Scaled
plot_summs(model_companies_bc, scale = TRUE, colors = "#287D8EFF")
## Plot the Model Scaled with Normal Dist
plot_summs(model_companies_bc, scale = TRUE, plot.distributions = TRUE,
inner_ci_level = .95, colors = "#287D8EFF")
## Plot the Model Comparing the BETAs for Linear versus Box-Cox Model
plot_summs(model_companies_sw, model_companies_bc, scale = T, plot.distributions = TRUE,
inner_ci_level = .95, colors = c("#440154FF", "#287D8EFF"))
prediction <- predict(object = model_companies_sw_bc,
data.frame(disclosure = 50,
liquidity = 14,
assets = 4000),
interval = "confidence", level = 0.95)
Predicted_result = ((prediction[1] * lambda_BC$lambda) + 1) ^ (1 / lambda_BC$lambda )
Predicted_result
companies$yhat_sw <- model_companies_sw$fitted.values
companies$yhat_swbc <- (((model_companies_bc$fitted.values*(lambda_BC$lambda))+
1))^(1/(lambda_BC$lambda))
companies %>%
ggplot() +
geom_smooth(aes(x = return, y = yhat_sw, color = "Stepwise"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5) +
geom_point(aes(x = return, y = yhat_sw),
color = "#440154FF", alpha = 0.6, size = 2) +
geom_smooth(aes(x = return, y = yhat_swbc, color = "Stepwise Box-Cox"),
method = "lm", se = F, formula = y ~ splines::bs(x, df = 5), size = 1.5) +
geom_point(aes(x = return, y = yhat_swbc),
color = "#287D8EFF", alpha = 0.6, size = 2) +
geom_smooth(aes(x = return, y = return), method = "lm", formula = y ~ x,
color = "grey30", size = 1.05,
linetype = "longdash") +
scale_color_manual("Model:",
values = c("#287D8EFF", "#440154FF")) +
labs(x = "Return", y = "Fitted Values") +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom")
